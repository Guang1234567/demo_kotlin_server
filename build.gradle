buildscript {
    repositories {
        mavenCentral()
        google()
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap/' }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-dev/' }
    }
}

plugins {
    id 'kotlin-multiplatform' version '1.3.21'
}

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://dl.bintray.com/kotlin/kotlinx" }
    maven { url "http://dl.bintray.com/kotlin/ktor" }
    maven { url "https://kotlin.bintray.com/kotlin-js-wrappers" }
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap/' }
    maven { url 'https://dl.bintray.com/kotlin/kotlin-dev/' }
}
def ktor_version = '1.0.1'
def logback_version = '1.2.3'

kotlin {
    jvm()
    jvm('backend')
    js() {
        compilations.all {
            kotlinOptions {
                languageVersion = "1.3"
                moduleKind = "umd"
                sourceMap = true
                metaInfo = true
            }
        }
    }
    js("frontend") {
        compilations.all {
            kotlinOptions {
                languageVersion = "1.3"
                moduleKind = "umd"
                sourceMap = true
                metaInfo = true
            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation "io.ktor:ktor-server-netty:$ktor_version"
                implementation "io.ktor:ktor-html-builder:$ktor_version"
                implementation "io.ktor:ktor-freemarker:$ktor_version"
                implementation "io.ktor:ktor-auth:$ktor_version"
                implementation "org.jetbrains:kotlin-css-jvm:+"
                implementation "ch.qos.logback:logback-classic:$logback_version"
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
                implementation "org.jetbrains:kotlin-css-js:+"
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }

        backendMain {
            dependsOn jvmMain
        }
        frontendMain {
            dependsOn jsMain
        }
    }
}


/*
    frontend
*/


def webFolder = new File(project.buildDir, "../src/jsMain/web")

def jsCompilations = kotlin.targets.js.compilations
task populateWebFolder(dependsOn: [jsMainClasses]) {
    doLast {
        copy {
            from jsCompilations.main.output
            from kotlin.sourceSets.jsMain.resources.srcDirs
            jsCompilations.test.runtimeDependencyFiles.each {
                if (it.exists() && !it.isDirectory()) {
                    from zipTree(it.absolutePath).matching { include '*.js' }
                }
            }
            into webFolder
        }
    }
}
jsJar.dependsOn(populateWebFolder)


def frontendCompilations = kotlin.targets.frontend.compilations
task populateFrontendWebFolder(dependsOn: [frontendMainClasses]) {
    doLast {
        copy {
            from frontendCompilations.main.output
            from kotlin.sourceSets.frontendMain.resources.srcDirs
            frontendCompilations.test.runtimeDependencyFiles.each {
                if (it.exists() && !it.isDirectory()) {
                    from zipTree(it.absolutePath).matching { include '*.js' }
                }
            }
            into webFolder
        }
    }
}
frontendJar.dependsOn(populateWebFolder)


/*
    backend
*/


/*
task run(type: JavaExec, dependsOn: [jvmMainClasses, jsJar]) {
    main = "sample.SampleJvmKt"
    classpath {
        [
                kotlin.targets.jvm.compilations.main.output.allOutputs.files,
                configurations.jvmRuntimeClasspath,
        ]
    }
    args = []
}
*/

task runBackend(type: JavaExec, dependsOn: [backendMainClasses, frontendJar]) {
    main = "io.ktor.server.netty.EngineMain"
    classpath {
        [
                kotlin.targets.backend.compilations.main.output.allOutputs.files,
                configurations.backendRuntimeClasspath,
        ]
    }
    args = []
}